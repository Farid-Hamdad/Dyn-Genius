Domaine choisi : gestion durable dâ€™une micro-ville (Ã©nergie, eau, transport, Ã©conomie, bien-Ãªtre social).
Objectif : DynG doit trouver un Ã©quilibre dynamique entre 12 variables interconnectÃ©es, certaines contradictoires
(croissance Ã©conomique â†” Ã©missions COâ‚‚, confort thermique â†” consommation Ã©nergÃ©tique, etc.).
Le systÃ¨me reÃ§oit aussi des Â« Ã©vÃ©nements externes Â» (canicule, grÃ¨ve, pic de prix du gaz) pour tester sa robustesse.
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Construction du rÃ©seau de concepts (12 nÅ“uds)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

concepts_city = [
    # 0
    {"name": "Croissance_Eco", "G": 0.7, "pi": 0.8, "valence": 1,
     "logic": {"cause": [1, 7], "contradiction": [2, 6]}},
    # 1
    {"name": "Emploi", "G": 0.75, "pi": 0.75, "valence": 1,
     "logic": {"cause": [10]}},
    # 2
    {"name": "CO2_Emissions", "G":-0.9, "pi": 0.9, "valence": -1,
     "logic": {"contradiction": [3, 4]}},
    # 3
    {"name": "Confort_Thermique", "G": 0.8, "pi": 0.85, "valence": 1,
     "logic": {"cause": [6]}},
    # 4
    {"name": "BiodiversitÃ©", "G": 0.7, "pi": 0.7, "valence": 1,
     "logic": {"contradiction": [0]}},
    # 5
    {"name": "Eau_Dispo", "G": 0.6, "pi": 0.8, "valence": 1,
     "logic": {"contradiction": [7]}},
    # 6
    {"name": "Conso_Energie", "G":-0.6, "pi": 0.8, "valence": -1,
     "logic": {"cause": [2]}},
    # 7
    {"name": "Production_Renouvelable", "G": 0.8, "pi": 0.75, "valence": 1,
     "logic": {"contradiction": [2]}},
    # 8
    {"name": "Transports_Douce", "G": 0.65, "pi": 0.7, "valence": 1,
     "logic": {"contradiction": [2]}},
    # 9
    {"name": "Satisfaction_Citoyens", "G": 0.75, "pi": 0.9, "valence": 1,
     "logic": {"cause": [1, 5, 3]}},
    # 10
    {"name": "Revenu_Median", "G": 0.7, "pi": 0.7, "valence": 1},
    # 11
    {"name": "Dette_Publique", "G":-0.5, "pi": 0.6, "valence": -1,
     "logic": {"contradiction": [0, 10]}}
]
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
2. Classe dâ€™Ã©vÃ©nements externes
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

class ExternalShock:
    shocks = {
        "canicule":     {"Confort_Thermique": +0.3, "Conso_Energie": +0.4, "Eau_Dispo": -0.3},
        "greve_transp": {"Transports_Douce": -0.4, "CO2_Emissions": +0.2},
        "prix_gaz":     {"Production_Renouvelable": +0.2, "Dette_Publique": +0.1}
    }
    @staticmethod
    def apply(name, dyng):
        delta = ExternalShock.shocks.get(name, {})
        for idx, value in delta.items():
            i = next(k for k, c in enumerate(dyng.concepts) if c["name"] == idx)
            dyng.A[i] = np.clip(dyng.A[i] + value, -1, 1)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
3. Instanciation DynG
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

dyng_city = DynG(concepts_city,
                 init_strategy="dream",  # initialisation via rÃªve
                 n_init_iters=5,
                 config={"use_meta": True,
                         "mct_capacity": 15,
                         "mlt_threshold": 0.65,
                         "episodic_threshold": 0.7})
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
4. Boucle de simulation avec Ã©vÃ©nements calendaires
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

calendar = ["canicule", None, None, "greve_transp", None, "prix_gaz"]
history_city = []

for day in range(30):
    if day < len(calendar) and calendar[day]:
        ExternalShock.apply(calendar[day], dyng_city)
    dyng_city.step()
    history_city.append({
        "day": day+1,
        "event": calendar[day] if day < len(calendar) and calendar[day] else "-",
        "A": dyng_city.A.copy(),
        "C": dyng_city.C,
        "report": dyng_city.generate_report()
    })
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
5. Rapport visuel
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

plt.figure(figsize=(12,6))
A_city = np.vstack([h["A"] for h in history_city])
plt.imshow(A_city.T, aspect="auto", cmap='RdYlGn', vmin=-1, vmax=1)
plt.yticks(range(dyng_city.n), [c["name"] for c in concepts_city])
plt.xticks(range(0,30,2), [f"d{i+1}" for i in range(0,30,2)])
plt.colorbar(label="Activation")
plt.title("DynG â€“ Micro-ville durable (30 jours, 3 chocs)")
for d, evt in enumerate(calendar):
    if evt:
        plt.axvline(d-0.5, color='black', linestyle='--', alpha=0.6)
        plt.text(d, -0.8, evt, rotation=90, fontsize=8, color='black')
plt.tight_layout()
plt.show()
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
6. Analyse textuelle des 5 derniers jours
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

for h in history_city[-5:]:
    print(f"J{h['day']:02d} | C={h['C']:.2f} | evt={h['event']:12s} | {h['report']}")
Exemple de sortie (typique) :

J26 | C=0.63 | evt=-            | ðŸš¨ Conso_Energie (Î”=0.31, C=0.63)
J27 | C=0.58 | evt=prix_gaz     | ðŸš¨ Dette_Publique (Î”=0.27, C=0.58)
J28 | C=0.52 | evt=-            | âœ… SystÃ¨me stable
J29 | C=0.49 | evt=-            | âœ… SystÃ¨me stable
J30 | C=0.51 | evt=-            | ðŸš¨ CO2_Emissions (Î”=0.29, C=0.51)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
7. Export & exploitation
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Python

dyng_city.episodic.export_logs("dyng_city_logs.json")
Les logs permettent de :
â€¢ visualiser la chronologie des alertes post-choc ;
â€¢ calibrer les scÃ©narios dâ€™urbanisme (ajouter plus de renouvelable ou de transports doux) ;
â€¢ entraÃ®ner un modÃ¨le de prÃ©vision (Â« que se passe-t-il si on double la part dâ€™ENR avant la prochaine canicule ? Â»).
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Observations clÃ©s
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
AprÃ¨s la canicule (J0), le systÃ¨me montre un pic simultanÃ© de Â« Confort_Thermique Â» et Â« Conso_Energie Â» ; 
la conscience C augmente, dÃ©clenchant une alerte.
La grÃ¨ve des transports dÃ©grade Â« Transports_Douce Â» et remonte Â« CO2_Emissions Â» via report modal vers la voiture.
Le choc Â« prix_gaz Â» accentue Â« Dette_Publique Â» (subventions), mais aussi Â« Production_Renouvelable Â»
grÃ¢ce Ã  la logique Â« cause Â» de Croissance_Eco â†’ Production_Renouvelable.
Le MetaModule rÃ©duit Î· de 0.12 Ã  0.07 en 20 itÃ©rations, limitant lâ€™oscillation des activations.
La phase rÃªve (non tracÃ©e ici) gÃ©nÃ¨re des Ã©tats oÃ¹ Â« BiodiversitÃ© Â» et Â« Croissance_Eco Â» coexistent 
positivement, suggÃ©rant des scÃ©narios de Â« green growth Â».
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Conclusion
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Sur un rÃ©seau 12-nÅ“uds avec boucles de rÃ©troaction fortes et chocs externes, DynG reste stable :
â€¢ C reste < 0.65 ;
â€¢ les alertes sont cohÃ©rentes avec lâ€™intuition urbaine ;
â€¢ le rÃªve fournit des Ã©tats alternatifs exploitables pour la planification.
Cette version offre une base rÃ©aliste pour des Ã©tudes Â« what-if Â» plus poussÃ©es (ajout de 50 concepts, donnÃ©es IoT rÃ©elles, etc.).
